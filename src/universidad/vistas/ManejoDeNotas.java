package universidad.vistas;

import java.awt.Graphics;
import java.awt.Image;
import java.util.ArrayList;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;
import universidad.accesoADatos.ValidarData;
import universidad.entidades.Alumno;
import universidad.entidades.Inscripcion;
/**
 *
 * @author Grupo 61
 */
public class ManejoDeNotas extends javax.swing.JInternalFrame {
    
    //Se crea el modelo que usaremos en la tabla, y se impide que se puedan modificar los valores de las celdas
    private final DefaultTableModel modelo = new DefaultTableModel(){
        
        @Override
        public boolean isCellEditable (int f, int c){
            
            return false;
        }
    };
    
    public ManejoDeNotas() {
        
        initComponents();
        cargarCB();
        jCBAlumnos.setSelectedIndex(0);
        armarTabla();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ImageIcon icon = new ImageIcon(getClass().getResource("/universidad/imagenes/Fondito.png"));
        Image image = icon.getImage();
        jPBackground = new javax.swing.JPanel(){

            public void paintComponent(Graphics g){
                g.drawImage(image,0,0,getWidth(),getHeight(),this);
            }
        };
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLNota = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTFNota = new javax.swing.JTextField();
        jCBAlumnos = new javax.swing.JComboBox<>();
        jBSalir = new javax.swing.JButton();
        jBGuardar = new javax.swing.JButton();
        jLPCabecera = new javax.swing.JLayeredPane();
        jLMargen = new javax.swing.JLabel();
        jLTitulo = new javax.swing.JLabel();
        jLLogo = new javax.swing.JLabel();

        setClosable(true);
        setMaximizable(true);
        setResizable(true);
        setPreferredSize(new java.awt.Dimension(500, 400));

        jPBackground.setBackground(new java.awt.Color(51, 51, 51));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable1.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jTable1);

        jLNota.setForeground(new java.awt.Color(235, 235, 235));
        jLNota.setText("Ingrese la nueva nota:");

        jLabel2.setForeground(new java.awt.Color(235, 235, 235));
        jLabel2.setText("Seleccione un alumno:");

        jTFNota.setBackground(new java.awt.Color(102, 102, 102));
        jTFNota.setForeground(new java.awt.Color(255, 255, 255));

        jCBAlumnos.setBackground(new java.awt.Color(51, 51, 51));
        jCBAlumnos.setForeground(new java.awt.Color(255, 255, 255));
        jCBAlumnos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCBAlumnosActionPerformed(evt);
            }
        });

        jBSalir.setBackground(new java.awt.Color(51, 51, 51));
        jBSalir.setForeground(new java.awt.Color(235, 235, 235));
        jBSalir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/universidad/imagenes/salir-w.png"))); // NOI18N
        jBSalir.setText("Salir");
        jBSalir.setIconTextGap(10);
        jBSalir.setPreferredSize(new java.awt.Dimension(105, 32));
        jBSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBSalirActionPerformed(evt);
            }
        });

        jBGuardar.setBackground(new java.awt.Color(51, 51, 51));
        jBGuardar.setForeground(new java.awt.Color(235, 235, 235));
        jBGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/universidad/imagenes/guardar-w.png"))); // NOI18N
        jBGuardar.setText("Guardar");
        jBGuardar.setIconTextGap(10);
        jBGuardar.setPreferredSize(new java.awt.Dimension(105, 32));
        jBGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBGuardarActionPerformed(evt);
            }
        });

        jLTitulo.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLTitulo.setForeground(new java.awt.Color(235, 235, 235));
        jLTitulo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLTitulo.setText("MANIPULACIÃ“N DE NOTAS");

        jLLogo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/universidad/imagenes/LogoULP3-w.png"))); // NOI18N

        jLPCabecera.setLayer(jLMargen, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLPCabecera.setLayer(jLTitulo, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLPCabecera.setLayer(jLLogo, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jLPCabeceraLayout = new javax.swing.GroupLayout(jLPCabecera);
        jLPCabecera.setLayout(jLPCabeceraLayout);
        jLPCabeceraLayout.setHorizontalGroup(
            jLPCabeceraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLPCabeceraLayout.createSequentialGroup()
                .addComponent(jLMargen, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLTitulo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLLogo))
        );
        jLPCabeceraLayout.setVerticalGroup(
            jLPCabeceraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jLPCabeceraLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jLPCabeceraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLTitulo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLMargen, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLLogo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPBackgroundLayout = new javax.swing.GroupLayout(jPBackground);
        jPBackground.setLayout(jPBackgroundLayout);
        jPBackgroundLayout.setHorizontalGroup(
            jPBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPBackgroundLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPBackgroundLayout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jCBAlumnos, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 458, Short.MAX_VALUE)
                    .addGroup(jPBackgroundLayout.createSequentialGroup()
                        .addComponent(jLNota)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTFNota)
                        .addGap(18, 18, 18)
                        .addComponent(jBGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPBackgroundLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jBSalir, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLPCabecera))
                .addGap(20, 20, 20))
        );
        jPBackgroundLayout.setVerticalGroup(
            jPBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPBackgroundLayout.createSequentialGroup()
                .addComponent(jLPCabecera, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jCBAlumnos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 138, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(jPBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTFNota, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLNota))
                .addGap(18, 18, 18)
                .addComponent(jBSalir, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPBackground, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPBackground, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //COMBOBOX AP
    private void jCBAlumnosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCBAlumnosActionPerformed
        
        //Registra el cambio de alumno seleccionado, lo recupera y en base a Ã©ste, actualiza los datos de las materias en la tabla
        limpiarTabla();
        Alumno al = (Alumno) jCBAlumnos.getSelectedItem();
        cargarDatos(al.getId());
    }//GEN-LAST:event_jCBAlumnosActionPerformed

    //BOTON SALIR
    private void jBSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBSalirActionPerformed
        
        //Cierra la ventana
        dispose();
    }//GEN-LAST:event_jBSalirActionPerformed

    //BOTON GUARDAR
    private void jBGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBGuardarActionPerformed
        
        //Se controla que el alumno seleccionado en el CB no se encuentre en el indice 0
        if (jCBAlumnos.getSelectedIndex()<=0) {
            
            JOptionPane.showMessageDialog(this, "Debe seleccionar un alumno de la lista");
            return;
        }
        
        //Controla que el campo de nota no se encuentre vacio
        if (jTFNota.getText().isEmpty()) {
            
            JOptionPane.showMessageDialog(this, "La casilla Nota no puede estar vacia");
            return;
        }
      
        //Se controla que una materia de la lista este seleccionada
        if (jTable1.getSelectedRow() == -1) {
            
            JOptionPane.showMessageDialog(this, "Debe seleccionar una materia");
            return;
        }
        
        try {
            //Se intenta parsear la nota y realizar su validacion
            double nota = Double.parseDouble(jTFNota.getText());
            if (ValidarData.validarNota(nota)) {
            
                JOptionPane.showMessageDialog(this, "En la casilla Nota debe ir un dato valido");
                return;
            }
            
            //Se recupera el alumno seleccionado del CB
            Alumno alu = (Alumno)jCBAlumnos.getSelectedItem();
            
            //Se recupera la materia seleccionada de la tabla
            int fila = jTable1.getSelectedRow();
            int idMateria =Integer.parseInt((String)modelo.getValueAt(fila , 0));
            
            //Se crea una variable tipo entero y se usa para almacenar el registro de la ejecucion del metodo actualizarNota
            int registro = Vista.getID().actualizarNota(alu.getId(), idMateria, nota);
            
            //Dependiendo del valor que tome la variable registro se muestra un mensaje al usuario
            if (registro > 0) {
                
                JOptionPane.showMessageDialog(this, "La nota se cargo correctamente");
            } else {
                
                JOptionPane.showMessageDialog(this, "No se pudo cargar la nota");
            }
            
            //Se limpia la tabla y se vuelven a cargar los datos de las materias
            limpiarTabla();
            cargarDatos(alu.getId());
        } catch (NumberFormatException ex) {
            
            JOptionPane.showMessageDialog(this, "El campo nota solo admite nÃºmeros");
        }
    }//GEN-LAST:event_jBGuardarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBGuardar;
    private javax.swing.JButton jBSalir;
    private javax.swing.JComboBox<Alumno> jCBAlumnos;
    private javax.swing.JLabel jLLogo;
    private javax.swing.JLabel jLMargen;
    private javax.swing.JLabel jLNota;
    private javax.swing.JLayeredPane jLPCabecera;
    private javax.swing.JLabel jLTitulo;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPBackground;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTFNota;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
   
    //Este metodo permite cargar los alumnos activos al comboBox
    private void cargarCB() {
        
        //Agregamos en el primer lugar un alumno vacio
        Alumno vacio=new Alumno(){
          @Override
          public String toString(){
            return "Seleccione un alumno...";
          }  
        };
        jCBAlumnos.addItem(vacio);
        
        //Se recupera una lista de alumnos
        ArrayList<Alumno> Lista = Vista.getAD().listarAlumnos();
        
        //Se recorre la lista y cada alumno se agrega al CB
        for (Alumno al : Lista) {
            jCBAlumnos.addItem(al);
        }
    }
    
    //Este metodo permite setear un modelo de tabla personalizado
    private void armarTabla() {
                
        //Se agregan las columnas con su nombre correspondiente al modelo de tabla creado anteriormente
        modelo.addColumn("ID");
        modelo.addColumn("Nombre");
        modelo.addColumn("Nota");
        
        //Se setea el modelo de tabla a la tabla de materias
        jTable1.setModel(modelo);
        
        //Se recupera el modelo de columnas
        TableColumnModel columnas = jTable1.getColumnModel();
        
        //Se llama al metodo que se encarga de setear el ancho de las columnas
        anchoColumna(columnas, 0, 60);
        anchoColumna(columnas, 2, 60);
    }
    
    //Este metodo se usa para setear el ancho de una columna
    //Recibe por parametro el modelo de columna de la tabla, el indice de la columna a modificar y el ancho deseado
    private void anchoColumna(TableColumnModel modeloTabla, int indice, int ancho){
        
        modeloTabla.getColumn(indice).setWidth(ancho);
        modeloTabla.getColumn(indice).setMaxWidth(ancho+30);
        modeloTabla.getColumn(indice).setMinWidth(ancho-10);
        modeloTabla.getColumn(indice).setPreferredWidth(ancho);
    }
    
    //Se cargan las filas en la tabla
    private void cargarDatos(int id){
        
        //Se recupera una lista de inscripciones
        ArrayList <Inscripcion> lista = Vista.getID().listarInscripcionesPorAlumno(id);
        
        //Se recorre la lista de inscripciones y por cada una, se llama al metodo cargarTabla y se le pasa la inscripcion por parametro
        for (Inscripcion inscripcion : lista) {
            cargarTabla(inscripcion);
        } 
    }
    
    //Este metodo se encarga de recibir una inscripcion y desglosar su informacion en una fila para agregarla a la tabla de inscripciones
    private void cargarTabla(Inscripcion insc) {
        
        modelo.addRow(new Object[]{
            insc.getIdMateria()+"",
            insc.getMateria().getNombre(),
            Double.toString(insc.getNota())
        });   
    }
    
    //Este metodo elimina todas las filas de la tabla
    private void limpiarTabla(){
        
        int fila=modelo.getRowCount()-1;
        for (int i = fila; i >=0; i--) {
            modelo.removeRow(i);
        }
    }
}
